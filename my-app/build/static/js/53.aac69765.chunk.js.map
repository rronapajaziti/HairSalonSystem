{"version":3,"file":"static/js/53.aac69765.chunk.js","mappings":"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","sources":["pages/DailyAppointment.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst DailyAppointments = ({ searchQuery }: { searchQuery: string }) => {\r\n  const [appointments, setAppointments] = useState<any[]>([]);\r\n  const [selectedDate, setSelectedDate] = useState<string>(\r\n    new Date().toISOString().split('T')[0],\r\n  );\r\n  const [services, setServices] = useState<any[]>([]);\r\n  const [timeSlots, setTimeSlots] = useState([\r\n    '09:00',\r\n    '09:30',\r\n    '10:00',\r\n    '10:30',\r\n    '11:00',\r\n    '11:30',\r\n    '12:00',\r\n    '12:30',\r\n    '13:00',\r\n    '13:30',\r\n    '14:00',\r\n    '14:30',\r\n    '15:00',\r\n    '15:30',\r\n    '16:00',\r\n    '16:30',\r\n    '17:00',\r\n    '17:30',\r\n    '18:00',\r\n    '18:30',\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    fetchAppointments();\r\n    fetchServices();\r\n  }, [selectedDate]);\r\n\r\n  const fetchAppointments = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://api.studio-linda.com/api/Appointment/schedule?date=${selectedDate}`,\r\n      );\r\n      const fetchedAppointments = response.data.appointments || [];\r\n      setAppointments(fetchedAppointments);\r\n\r\n      // Update timeSlots with missing times\r\n      const newTimes = fetchedAppointments.map((appt: any) =>\r\n        new Date(appt.appointmentDate)\r\n          .toLocaleTimeString('en-US', {\r\n            hour: '2-digit',\r\n            minute: '2-digit',\r\n            hour12: false,\r\n          })\r\n          .slice(0, 5),\r\n      );\r\n\r\n      setTimeSlots((prevTimeSlots) => {\r\n        const allTimes = [...prevTimeSlots, ...newTimes];\r\n        const uniqueTimes = Array.from(new Set(allTimes)); // Remove duplicates\r\n        return uniqueTimes.sort(); // Ensure times are sorted\r\n      });\r\n    } catch (error) {\r\n      console.error('Error fetching appointments:', error);\r\n    }\r\n  };\r\n\r\n  const fetchServices = async () => {\r\n    try {\r\n      const response = await axios.get(\r\n        'https://api.studio-linda.com/api/Service',\r\n      );\r\n\r\n      // Correctly extract services from response.data\r\n      const fetchedServices = Array.isArray(response.data) ? response.data : [];\r\n      setServices(fetchedServices);\r\n    } catch (error) {\r\n      console.error('Error fetching services:', error);\r\n      setServices([]); // Ensure services is an empty array on error\r\n    }\r\n  };\r\n\r\n  const getAppointmentsForTimeAndService = (\r\n    timeSlot: string,\r\n    serviceName: string,\r\n  ) => {\r\n    return appointments.filter((appt) => {\r\n      const appointmentTime = new Date(appt.appointmentDate)\r\n        .toLocaleTimeString('en-US', {\r\n          hour: '2-digit',\r\n          minute: '2-digit',\r\n          hour12: false,\r\n        })\r\n        .slice(0, 5);\r\n\r\n      return appointmentTime === timeSlot && appt.serviceName === serviceName;\r\n    });\r\n  };\r\n\r\n  const calculateRemainingRevenue = (service: any) => {\r\n    const serviceAppointments = appointments.filter(\r\n      (appt) =>\r\n        appt.serviceName === service.serviceName &&\r\n        appt.status.toLowerCase() === 'përfunduar',\r\n    );\r\n\r\n    return serviceAppointments.reduce((total: number, appt: any) => {\r\n      const percentage = parseFloat(service.staffEarningPercentage) || 0;\r\n      const price = parseFloat(appt.price) || 0;\r\n      const priceAfterStaffCut = price * (1 - percentage / 100);\r\n      return total + priceAfterStaffCut;\r\n    }, 0);\r\n  };\r\n\r\n  const calculateTotalForDay = () => {\r\n    return services.reduce((total: number, service: any) => {\r\n      return total + calculateRemainingRevenue(service);\r\n    }, 0);\r\n  };\r\n\r\n  // Filter appointments based on search query\r\n  const filteredAppointments = appointments.filter((appt) => {\r\n    const clientMatches = appt.clientName\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase());\r\n    const staffMatches = appt.staffName\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase());\r\n    return clientMatches || staffMatches;\r\n  });\r\n\r\n  return (\r\n    <div className=\"max-w-6xl mx-auto p-4 bg-white shadow-lg rounded-lg text-black dark:text-white dark:border-strokedark dark:bg-boxdark mb-20\">\r\n      <h2 className=\"text-2xl font-semibold mb-4 text-blue-700 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n        Orari Ditor për {new Date(selectedDate).toLocaleDateString('sq-AL')}\r\n      </h2>\r\n      <div className=\"flex items-center mb-4\">\r\n        <label className=\"mr-2 font-medium text-gray-700 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n          Zgjidh Datën:\r\n        </label>\r\n        <input\r\n          type=\"date\"\r\n          value={selectedDate}\r\n          onChange={(e) => setSelectedDate(e.target.value)}\r\n          className=\"border px-2 py-1 rounded shadow-sm text-black dark:text-white dark:border-strokedark dark:bg-boxdark\"\r\n        />\r\n      </div>\r\n      <div className=\"overflow-x-auto text-black dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n        <table className=\"min-w-full border-collapse border border-gray-300 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"border border-gray-300 px-4 py-2 bg-gray-200 text-left text-black dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                Ora\r\n              </th>\r\n              {services.map((service, index) => (\r\n                <th\r\n                  key={index}\r\n                  className=\"border border-gray-300 px-4 py-2 bg-gray-200 text-left text-black dark:text-white dark:border-strokedark dark:bg-boxdark\"\r\n                >\r\n                  {service.serviceName}\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {timeSlots.map((timeSlot, index) => (\r\n              <tr key={index}>\r\n                <td className=\"border border-gray-300 px-4 py-2 font-medium text-gray-700 dark:text-white\">\r\n                  {timeSlot}\r\n                </td>\r\n                {services.map((service, serviceIndex) => (\r\n                  <td\r\n                    key={serviceIndex}\r\n                    className=\"border border-gray-300 px-4 py-2\"\r\n                  >\r\n                    {getAppointmentsForTimeAndService(\r\n                      timeSlot,\r\n                      service.serviceName,\r\n                    ).map((appt, apptIndex) => (\r\n                      <div\r\n                        key={apptIndex}\r\n                        className={`text-sm p-1 rounded shadow-md mb-1 ${\r\n                          appt.status === 'përfunduar'\r\n                            ? 'bg-red-400 dark:bg-red-500'\r\n                            : 'bg-blue-400 dark:bg-blue-700'\r\n                        }`}\r\n                      >\r\n                        <span className=\"font-medium\">\r\n                          {appt.clientName || 'Pa Klient'}\r\n                        </span>{' '}\r\n                        - <span>{appt.staffName || 'Pa Staf'}</span>\r\n                      </div>\r\n                    ))}\r\n                  </td>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <td className=\"border border-gray-300 px-4 py-2 font-medium text-gray-700 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                Totali për Shërbim\r\n              </td>\r\n              {services.map((service, index) => (\r\n                <td\r\n                  key={index}\r\n                  className=\"border border-gray-300 px-4 py-2 font-medium text-green-600\"\r\n                >\r\n                  {calculateRemainingRevenue(service).toFixed(2)}€\r\n                </td>\r\n              ))}\r\n            </tr>\r\n          </tbody>\r\n          <tfoot>\r\n            <tr>\r\n              <td\r\n                colSpan={services.length + 1}\r\n                className=\"border border-gray-300 px-4 py-2 font-bold text-right text-blue-700\"\r\n              >\r\n                Fitimi i Ditës: {calculateTotalForDay().toFixed(2)}€\r\n              </td>\r\n            </tr>\r\n          </tfoot>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DailyAppointments;\r\n"],"names":["_ref","searchQuery","appointments","setAppointments","useState","selectedDate","setSelectedDate","Date","toISOString","split","services","setServices","timeSlots","setTimeSlots","useEffect","fetchAppointments","fetchServices","async","fetchedAppointments","axios","get","data","newTimes","map","appt","appointmentDate","toLocaleTimeString","hour","minute","hour12","slice","prevTimeSlots","allTimes","Array","from","Set","sort","error","console","response","fetchedServices","isArray","getAppointmentsForTimeAndService","timeSlot","serviceName","filter","calculateRemainingRevenue","service","status","toLowerCase","reduce","total","percentage","parseFloat","staffEarningPercentage","price","clientMatches","clientName","includes","staffMatches","staffName","_jsxs","className","children","toLocaleDateString","_jsx","type","value","onChange","e","target","index","serviceIndex","apptIndex","toFixed","colSpan","length"],"sourceRoot":""}