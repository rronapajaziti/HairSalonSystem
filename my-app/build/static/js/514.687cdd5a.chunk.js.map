{"version":3,"file":"static/js/514.687cdd5a.chunk.js","mappings":"sLAGA,MA+HA,EA/HoBA,IAA+C,IAA9C,YAAEC,GAAsCD,EAC3D,MAAOE,EAAYC,IAAiBC,EAAAA,EAAAA,UAAgB,KAC7CC,EAASC,IAAcF,EAAAA,EAAAA,WAAkB,IAEhDG,EAAAA,EAAAA,YAAU,KACRC,GAAc,GACb,IAEH,MAAMA,EAAeC,UACnBH,GAAW,GAEX,IAEE,MAIMI,SAJiBC,EAAAA,EAAMC,IAC3B,iDAG4BC,KAGxBC,QAAuBC,QAAQC,IACnCN,EAAaO,KAAIR,UACf,MAAM,UAAES,EAAS,SAAEC,EAAQ,YAAEC,EAAW,MAAEC,GACxCC,EAAYC,OAEd,IAAK,IAADC,EAEF,MAIMC,GACc,QAAlBD,SAL0Bb,EAAAA,EAAMC,IAChC,wFAAwFM,cAAsBC,iBAAwBC,WAAqBC,MAI7IR,YAAI,IAAAW,OAAA,EAAlBA,EAAoBC,wBAAyB,EAC/C,MAAO,IACFH,EAAYC,OACfE,wBAEJ,CAAE,MAAOC,GAKP,OAJAC,QAAQD,MACN,6CAA6CR,KAAaC,KAC1DO,GAEK,IACFJ,EAAYC,OACfE,sBAAuB,EAE3B,MAIJtB,EAAcW,EAChB,CAAE,MAAOY,GACPC,QAAQD,MAAM,+BAAgCA,EAChD,CAAC,QACCpB,GAAW,EACb,GAIIsB,EAAkB1B,EAAW2B,QAAQN,GACzC,GAAGA,EAAOL,aAAaK,EAAOJ,WAC3BW,cACAC,SAAS9B,EAAY6B,iBAG1B,OACEE,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oIAAmIC,SAAA,EAChJC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,2DAA0DC,SAAC,iBAIzEC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,6BAA4BC,SACxC7B,GACC8B,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gBAELF,EAAAA,EAAAA,MAAA,SAAOC,UAAU,2DAA0DC,SAAA,EACzEC,EAAAA,EAAAA,KAAA,SAAAD,UACEF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,wBAAuBC,SAAA,EACnCC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iFAAgFC,SAAC,sBAG/FC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iFAAgFC,SAAC,uBAG/FC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iFAAgFC,SAAC,WAG/FC,EAAAA,EAAAA,KAAA,MAAIF,UAAU,iFAAgFC,SAAC,4BAKnGC,EAAAA,EAAAA,KAAA,SAAAD,SACGN,EAAgBQ,OAAS,EACxBR,EAAgBX,KAAKM,IACnBS,EAAAA,EAAAA,MAAA,MAAAE,SAAA,CACG,KAEDF,EAAAA,EAAAA,MAAA,MAAIC,UAAU,uCAAsCC,SAAA,CACjDX,EAAOL,UAAU,IAAEK,EAAOJ,aAE7BgB,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uCAAsCC,SACjDX,EAAOH,eAEVe,EAAAA,EAAAA,KAAA,MAAIF,UAAU,uCAAsCC,SACjDX,EAAOF,SAEVc,EAAAA,EAAAA,KAAA,MAAIF,UAAU,mDAAkDC,SAC7DX,EAAOE,0BAbHF,EAAOF,UAkBlBc,EAAAA,EAAAA,KAAA,MAAAD,UACEC,EAAAA,EAAAA,KAAA,MAAIE,QAAS,EAAGJ,UAAU,wBAAuBC,SAAC,gCAS1D,C","sources":["pages/Client.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst ClientTable = ({ searchQuery }: { searchQuery: string }) => {\r\n  const [clientList, setClientList] = useState<any[]>([]);\r\n  const [loading, setLoading] = useState<boolean>(true); // Loading state\r\n\r\n  useEffect(() => {\r\n    fetchClients();\r\n  }, []);\r\n\r\n  const fetchClients = async () => {\r\n    setLoading(true); // Start loading when fetching data\r\n\r\n    try {\r\n      // Step 1: Fetch all appointments to get client data\r\n      const response = await axios.get(\r\n        'https://api.studio-linda.com/api/Appointment',\r\n      );\r\n\r\n      const appointments = response.data;\r\n\r\n      // Step 2: Fetch completed appointments for each client and merge with client data\r\n      const updatedClients = await Promise.all(\r\n        appointments.map(async (appointment: any) => {\r\n          const { firstName, lastName, phoneNumber, email } =\r\n            appointment.client;\r\n\r\n          try {\r\n            // Step 3: Fetch completed appointments for each client\r\n            const countResponse = await axios.get(\r\n              `https://api.studio-linda.com/api/appointment/completed-appointments-client?firstName=${firstName}&lastName=${lastName}&phoneNumber=${phoneNumber}&email=${email}`,\r\n            );\r\n\r\n            const completedAppointments =\r\n              countResponse.data?.completedAppointments || 0;\r\n            return {\r\n              ...appointment.client,\r\n              completedAppointments,\r\n            };\r\n          } catch (error) {\r\n            console.error(\r\n              `Error fetching completed appointments for ${firstName} ${lastName}:`,\r\n              error,\r\n            );\r\n            return {\r\n              ...appointment.client,\r\n              completedAppointments: 0, // Default to 0 if error occurs\r\n            };\r\n          }\r\n        }),\r\n      );\r\n\r\n      setClientList(updatedClients); // Update state with the merged client data\r\n    } catch (error) {\r\n      console.error('Error fetching appointments:', error);\r\n    } finally {\r\n      setLoading(false); // Stop loading after the request is complete\r\n    }\r\n  };\r\n\r\n  // Filter clients based on search query\r\n  const filteredClients = clientList.filter((client) =>\r\n    `${client.firstName} ${client.lastName}`\r\n      .toLowerCase()\r\n      .includes(searchQuery.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    <div className=\"rounded-sm border border-stroke bg-white px-5 pt-6 pb-2.5 shadow-default dark:border-strokedark dark:bg-boxdark sm:px-7.5 xl:pb-1\">\r\n      <h1 className=\"text-xl font-semibold dark:text-white text-blue-900 mb-4\">\r\n        KlientÃ«t\r\n      </h1>\r\n\r\n      <div className=\"max-w-full overflow-x-auto\">\r\n        {loading ? (\r\n          <div>Loading...</div> // Show loading text while data is being fetched\r\n        ) : (\r\n          <table className=\"w-full table-auto dark:border-strokedark dark:bg-boxdark\">\r\n            <thead>\r\n              <tr className=\"bg-gray-200 text-left\">\r\n                <th className=\"py-4 px-4 text-blue-900 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                  Emri dhe Mbiemri\r\n                </th>\r\n                <th className=\"py-4 px-4 text-blue-900 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                  Numri i Telefonit\r\n                </th>\r\n                <th className=\"py-4 px-4 text-blue-900 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                  Email\r\n                </th>\r\n                <th className=\"py-4 px-4 text-blue-900 dark:text-white dark:border-strokedark dark:bg-boxdark\">\r\n                  Terminet e Kryera\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {filteredClients.length > 0 ? (\r\n                filteredClients.map((client) => (\r\n                  <tr key={client.email}>\r\n                    {' '}\r\n                    {/* Use email or another unique identifier */}\r\n                    <td className=\"py-4 px-4 dark:text-white text-black\">\r\n                      {client.firstName} {client.lastName}\r\n                    </td>\r\n                    <td className=\"py-4 px-4 dark:text-white text-black\">\r\n                      {client.phoneNumber}\r\n                    </td>\r\n                    <td className=\"py-4 px-4 dark:text-white text-black\">\r\n                      {client.email}\r\n                    </td>\r\n                    <td className=\"py-4 px-4 dark:text-white text-black text-center\">\r\n                      {client.completedAppointments}\r\n                    </td>\r\n                  </tr>\r\n                ))\r\n              ) : (\r\n                <tr>\r\n                  <td colSpan={4} className=\"py-4 px-4 text-center\">\r\n                    No clients found\r\n                  </td>\r\n                </tr>\r\n              )}\r\n            </tbody>\r\n          </table>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ClientTable;\r\n"],"names":["_ref","searchQuery","clientList","setClientList","useState","loading","setLoading","useEffect","fetchClients","async","appointments","axios","get","data","updatedClients","Promise","all","map","firstName","lastName","phoneNumber","email","appointment","client","_countResponse$data","completedAppointments","error","console","filteredClients","filter","toLowerCase","includes","_jsxs","className","children","_jsx","length","colSpan"],"sourceRoot":""}